<1>C++ 的动态多态怎么实现的
多态过程：在基类的函数前加上virtual关键字使其变为虚函数，在派生类中去重写该虚函数，则在运行时会根据所指对象的实际类型来调用相应的函数，如果所指对象是基类则调用基类虚函数，如果所指对象为派生类则调用派生类虚函数
多态底层原理：
虚函数表：类中含有虚函数时，编译器会为这个类生成一个虚函数表
虚表指针：在含有虚函数类对象进行实例化时，对象地址的首4个字节会存储指向虚表的指针vptr
原理性过程：
(1)编译器在发现类中含有虚函数时，会自动为这个类生成一份虚表，该表是一个一维数组，里面保存虚函数的入口地址
(2)在构造时，编译器会为含有虚函数的类生成一个4字节保存虚函数表地址的虚表指针，此指针指向这个类的虚表地址
(3)当派生类没有对基类的虚函数重写时，派生类的虚表指针指向的是基类的虚表；当派生类对基类的虚函数重写时，派生类的虚表指针指向的是自身的虚表；当派生类中有自己的虚函数时，在自己的虚表中将此虚函数加在后面。
这样指向派生类的基类指针在运行时，就可以根据派生类对虚函数的重写情况动态进行调用，从而实现多态。

<2>(1)C++的构造函数、析构函数可以是虚函数吗(2)构造函数和析构函数可以调用虚函数吗？为什么
(1)
构造函数
结论：不能;如果把构造函数声明为虚函数，编译阶段就会报错。
原因：
1.vptr角度解释：虚函数的调用是依赖于虚表指针，而虚表指针是在类对象调用构造函数时进行分配的，所以把构造函数定义为虚函数，但此时又还没有虚表指针，则是没办法生效虚函数
2.多态角度解释：虚函数主要是为了实现多态，在运行时才明确调用对象，根据传入对象的类型调用不同的虚函数；而构造函数是在创建对象时自己主动调用的，不可能通过父类的指针或引用去调用。
析构函数：
结论：能；且如果类有子类进行继承时，析构函数必须为虚函数
原因：
防止内存泄露：如果派生类中申请了内存空间，并且其析构函数中对这些内存空间进行释放。那么如果基类析构函数不是虚函数，则基类指针指向派生类对象，在delete此指针时不会触发动态绑定，就只会调用基类的析构函数，而不会调用派生类析构函数。
(2)
1.C++中在构函数和析构函数中调用虚函数从编译、运行上是没问题的，但不倡导
2.构造函数和析构函数中调用虚函数都不会使用动态绑定，即在构造函数和析构函数中调用虚函数实际运行的都是自身类型定义的版本

<3>进程间通信方式IPC
https://www.jianshu.com/p/c1015f5ffa74
1.管道
所谓管道就是内核里面的一串缓存。从管道一端写入数据实际就是缓存在内核中，另一端读取也就是从内核读取这段数据。遵循先进先出原则。
匿名管道：linux中ps auxf|grep mysql中的|就是一个匿名管道
命名管道:linux mjfifo命令创建 在linux中就是一种文件类型p
特性：匿名管道是单向的，只能在有亲缘关系的进程间通信；有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。管道这种通信方式效率低，不适合进程间频繁交换数据。
2.消息队列
消息队列是存放在内核中的消息链表，每个消息队列由消息队列标识符表示
3.共享内存
共享内存机制就是拿出一块虚拟地址空间来，映射到相同的物理内存中，那么多个进程就可以直接读写同一块内存空间，是最快的IPC形式。
共享内存依赖于某种同步机制(信号量)来达到进程间互斥和同步的效果
4.信号量
信号量其实是一个整型计数器，主要用于实现进程间的互斥和同步，而不是用于缓存进程间通信的数据。
信号量两个原子操作：
P操作:此操作会把信号量-1，相减后如果信号量<0，则表明资源已被占用，进程需要等待;相减后如果>=0则表明还有资源可以使用，进行继续正常执行
V操作:此操作会把信号量+1，相加后如果信号量<=0，说明当前有正在阻塞中的进程，于是将改进程进行唤醒；相加后如果>0则表示当前没有阻塞中的进程
P操作在使用共享资源前，V操作在离开共享资源后，这两个操作必须成对出现。
信号量与互斥量之间的区别：
互斥量用于线程的互斥，信号量用于线程的同步。
互斥：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。
同步：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。
在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。
典型应用：生产者-消费者模型
5.信号
信号是软件层次上对中断机制的一种模拟，是一种异步通信方式，信号可以在用户空间进程和内核之间直接交互，内核可以利用信号来通知用户空间的进程发生了哪些系统事件
来源
硬件来源：用户按键输入Ctrl+C退出、硬件异常如无效的存储访问等
软件来源：终止进程信号、其他进程调用kill函数、软件异常产生信号
处理方式
执行默认操作：linux对每种信号都规定了默认操作
捕捉信号：可以为一个信号定义信号处理函数
忽律信号：不处理某些信号，直接忽律 SIG_IGN
6.socket
跨网络不同主机进程间的通信
int socket(int domain, int type, int protocol0);
domain：AF_INET IPV4 AF_INET6 IPV6
type：SOCK_STREAM 字节流 TCP；SOCK_DGRAM 数据包 UDP
protocol：一般写成0

