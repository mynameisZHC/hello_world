{1}腾讯后台开发社招面经
https://www.nowcoder.com/discuss/335441?channel=-1&source_id=profile_follow_post_nctrack

<1>list和vector实现有什么区别？讲讲vector的resize操作？
-todo

<2>linux查看网络状态命令是什么？使用场景？
•	netstat 命令：用于显示各种网络相关信息，如网络连接，路由表，接口状态，无效连接，组播成员 等等。
•	netstat命令是net-tools软件包中的一员
[root@web129 ~]# netstat 选项
选项：
    -a:　　列出系统中所有网络连接，包括已经连接的网络服务、监听的网络服务和Socket套接字        
    -t：　　列出TCP数据    -u：　　列出UDP数据
    -l：　　列出正在监听的网络服务（不包含已经连接的网路服务）
    -n：　　用端口显示服务，而不用服务名
-p：　　列出该服务的进程ID(PID)
https://www.cnblogs.com/yangleitao/p/9583280.html

<3>TCP和UDP有什么区别？应用场景？三次握手四次断开的过程？TCP怎么保证可靠性？UDP有可靠性保证吗？四次断开如果服务器没有收到客户端的确认包，会一直等待吗？等多久？
(1)TCP 和 UDP 区别：
1. 连接
TCP 是面向连接的传输层协议，传输数据前先要建立连接。
UDP 是不需要连接，即刻传输数据。
2. 服务对象
TCP 是一对一的两点服务，即一条连接只有两个端点。
UDP 支持一对一、一对多、多对多的交互通信
3. 可靠性
TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达。
UDP 是尽最大努力交付，不保证可靠交付数据。
4. 拥塞控制、流量控制
TCP 有拥塞控制和流量控制机制，保证数据传输的安全性。
UDP 则没有，即使网络非常拥堵了，也不会影响 UDP 的发送速率。
5. 首部开销
TCP 首部长度较长，会有一定的开销，首部在没有使用「选项」字段时是 20 个字节，如果使用了「选项」字段则会变长的。
UDP 首部只有 8 个字节，并且是固定不变的，开销较小。
6.传输方式
TCP是字节流传输，没有边界，但保证顺序和可靠。UDP是一个包一个包传输的，有边界但可能会丢包和乱序。

(2)TCP 和 UDP 应用场景：
由于 TCP 是面向连接，能保证数据的可靠性交付，因此经常用于：
FTP 文件传输
HTTP / HTTPS
由于 UDP 面向无连接，它可以随时发送数据，再加上UDP本身的处理既简单又高效，因此经常用于：
包总量较少的通信，如 DNS 、SNMP 等
视频、音频等多媒体通信
广播通信

(3)略

(4)
TCP保证可靠性的措施：序列号和确认应答；重传机制(超时重传、快速重传)；滑动窗口(流量控制)

UDP它不属于连接型协议，因而具有资源消耗小，处理速度快的优点，所以通常音频、视频和普通数据在传送时使用UDP较多，因为它们即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。

传输层无法保证数据的可靠传输，只能通过应用层来实现了。实现的方式可以参照tcp可靠性传输的方式，只是实现不在传输层，实现转移到了应用层。
https://blog.csdn.net/gettogetto/article/details/76736365

(5)
不会一直等待，会触发超时重传。在超过RTO(超时重传时间)后服务端会重发FIN包。RTO是个根据网络RTT(往返时延)动态变化的时间，理论上RTO应该略大于RTT。
如果超时重发的数据，再次超时的时候，又需要重传的时候，TCP 的策略是超时间隔加倍。
也就是每当遇到一次超时重传的时候，都会将下一次超时时间间隔设为先前值的两倍。两次超时，就说明网络环境差，不宜频繁反复发送。

<4>两个浮点数如何比较大小？
浮点数比较大小,由于精度问题,所以直接比较有时可能会出错。 所以在比较的时候需要用一个很小的数值来进行比较。当二者差小于这个很小的数时,就认为二者是相等的了。这个很小的数称为精度。 精度由计算过程中需求而定。比如一个常用的精度为1E-6.也就是0.000001. 所以对于两个浮点数a,b 如果fabs(a-b)<=1E-6,那么就是相等了。 fabs是求浮点数绝对值的函数

<5>指针和引用的区别
1.指针是一个变量，存储的是一个地址，需要占用存储空间;引用跟原来的变量实质上是同一个东西，是原变量的别名, 不占用具体存储空间
2.指针可以有多级，引用只有一级
3.指针可以为空，引用不能为NULL且在定义时必须初始化
4.指针在初始化后可以改变指向，而引用在初始化之后不可再改变

