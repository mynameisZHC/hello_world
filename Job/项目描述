1.项目的消息分发机制
https://blog.csdn.net/machuanfei_c/article/details/80922158?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_paycolumn_v3&utm_relevant_index=5
(1)内部：有一个消息分发器 在这个消息分发器里面会根据不同的组件进行不同消息码的注册(相关的回调函数;收到消息后会根据包头的消息码去分发器里找对应组件的的回调函数 然后到对应组件里面去进行相关操作。



2.负载均衡算法
https://blog.csdn.net/okiwilldoit/article/details/81738782?spm=1001.2101.3001.6650.9&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9.pc_relevant_paycolumn_v3&utm_relevant_index=15
https://xianshang.blog.csdn.net/article/details/88777503?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-4.pc_relevant_paycolumn_v3&utm_relevant_index=9
https://blog.csdn.net/qq_37043780/article/details/82714830

3.性能优化方法
(1)本地就用valgrind+kcachegrind,通过本地模拟环境的用例来分析自身函数消耗的总指令数、子函数消耗的总指令数、函数调用次数等得到具体的热点函数
(2)基站环境上就用perf抓取特定业务情况下对应进程的特定时长的CPU快照 然后对采样后的数据进行解析(CPU消耗占比 热点函数);也可以用FlameGraph绘制热点函数火焰图


4.项目一
(1)"相比上个版本用户接入时延减少10%，并发用户数提升20%"
手机和基站之前的通信是通过无线电射频信号(高频交流变化的电磁波);其中涉及基带(模数信号转换)、射频(射频调制/解调)芯片。
定义:
接入时延:我们的手机开机或者飞行之后，SIM卡标识是需要过一会才能显示出来，也就是说整个终端开机入网的过程也就短短一两秒钟，对用户而言就是简单的手机信号标识从“X”变为正常显示,但实际这个过程涉及终端和基站很多条消息的交互。
接入时延即终端发起的第一条接入消息到最后用户入网的这个时延。
并发用户数:CAPS(每秒尝试呼叫次数)，可以理解为每秒能做的最大接入用户数。

业务上措施:
<1>做资源预申请:将流程上一些可以提前申请的资源做提前申请,可以理解为每个用户的一些状态信息,之前的流程是用户接入后向对应模块发送消息去申请对应的资源，对应模块再启动资源内存申请对应的流程。
现在改为在这些模块上提前申请一个资源池,然后用户接入后就从这个池子里面对应去取,用户释放后就归还对应的资源,如果资源不够就扩容或者禁止用户接入,跟内存池、线程池一个思想
<2>做消息瘦身:尽可能减少热点消息数据结构体大小,运用bitmap、多重含义字段进行消息瘦身

软件上措施:
<1>热点函数优化：减少热点函数的嵌套深度,减少热点函数中的复杂命令(memset、memcpy之类)

caps指标主要跟cpu的忙时利用率相关,比如同一个业务模型，每模拟接入1000个用户,cpu利用率如果达到80%则在业务中认为是高cpu占用率,此时就会出现用户接入时延变大(平时一个用户接入可能需要300ms 此时需要600ms)
,也可能会出现某些内存不够用导致的接入失败等现象

(2)"使得此模块代码规模减少20%,性能提升15%"
代码规模:将流程中相似的流程、模块使用模板函数或者模板类进行公共部分提取;将一些switch case场景用hash表或者表驱动进行优化
性能提升:动态数据申请,
