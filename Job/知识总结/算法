<1>排序算法
快速排序-基于交换的高效的排序算法，它采用了分治法的思想：
1、从数列中取出一个数作为基准数（枢轴，pivot）。
2、将数组进行划分(partition)，将比基准数大的元素都移至枢轴右边，将小于等于基准数的元素都移至枢轴左边。
3、再对左右的子区间重复第二步的划分操作，直至每个子区间只有一个元
最坏(正序或者逆序)时间复杂度o(n2)   平均时间复杂度o(nlogn) 最好时间复杂度o(nlogn) 最优情况下 每次找到的参考轴把数据分成均匀的两半，最后应该是一个平衡二叉树状态；二叉树的层数（logn）
int Partition(int *arr, int left, int right)
{
	int pivotIndex = left; // 取第一个元素作为基准 (也可以取最后一个或者中间元素)
	int pivot = arr[pivotIndex]; // 基准元素值
	while (left < right) {
		while (left <right && arr[right] > pivot) {
			right--;
		}

		while (left < right && arr[left] <= pivot) {
			left++;
		}
		//找到left比基准大，right比基准小，进行交换
		if (left < right) {
			swap(arr[left], arr[right]);
		}
	}
	//一轮完成，让left和right重合的位置和基准交换，返回基准的位置
	swap(arr[pivotIndex], arr[left]);
	return left;
}

void QuickSort(int *arr, int left, int right)
{
	if (left < right) {
		//找出基准
		int partition = Partition(arr, left, right);
		//分成两边递归进行
		QuickSort(arr, left, partition - 1);
		QuickSort(arr, partition + 1, right);
	}
}

冒泡排序
最好时间复杂度 o(n)本身已经排序好 记个是否swap过的标志位 如果没交换过外层直接返回 所以最好为o(n) 
最坏时间复杂度o(n2)数组本身为逆序 平均o(n2)
void BunbleSort(int *arr, int n)
{
	// 外层循环控制第1到n-1趟排序
	for (int i = 0; i < n - 1; i++) {
		// 内层循环是对第i趟时 前面n-i个元素进行比较和交换
		for (int j = 0; j < (n - i - 1); j++) {
			if (arr[j] > arr[j + 1]) {
				swap(arr[j], arr[j + 1]);
			}
		}
	}
}
