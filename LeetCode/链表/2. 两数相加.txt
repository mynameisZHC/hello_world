note:
链表遍历
code:
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* node = new ListNode(0) ;
        ListNode* head = node;
        int sum = 0; // 累加和
        int curNum = 0; // 当前位数值
        int carryNum = 0; /// 进位数值
        while (l1 != nullptr || l2 != nullptr) {
            int l1Val = (l1 != nullptr) ? l1->val : 0;
            int l2Val = (l2 != nullptr) ? l2->val : 0;
            sum = l1Val + l2Val + carryNum;
            curNum = sum % 10;
            carryNum = sum / 10;
            ListNode* temp = new ListNode(curNum);
            node->next = temp;
            node = temp;
            // L1 L2都非空情况下 同时向前移动一个节点

            if (l1 != nullptr) {
                l1 = l1->next;
            }

            if (l2 != nullptr) {
                l2 = l2->next;
            }
        }
        // 遍历结束后进位值不为0 说明还需要再尾节点再插入一个节点
        if (carryNum != 0) {
            node->next = new ListNode(carryNum);
        }
        // head是辅助头节点  真正的头节点应该是head的下一个节点
        return head->next;
    }
};
