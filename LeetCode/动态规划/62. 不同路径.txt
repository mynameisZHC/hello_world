note:
1.由于我们每一步只能从向下或者向右移动一步，因此要想走到 (i, j)(i,j)，如果向下走一步，那么会从 (i-1, j)(i−1,j) 走过来；如果向右走一步，那么会从 (i, j-1)(i,j−1) 走过来。
  因此我们可以写出动态规划转移方程：f(i, j) = f(i-1, j) + f(i, j-1)
2.注意一些边界点的判断

code:
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> map (m,vector<int>(n,0));
        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                int leftVal = ((col - 1) >= 0) ? map[row][col - 1] : 0;
                int downVal = ((row - 1) >= 0) ? map[row - 1][col] : 0;
                if (row == 0 && col == 0) { // 注意原点这个需要特殊判断
                    map[row][col] = 1;
                } else {
                    map[row][col] = leftVal + downVal;
                }

            }
        }
        return map[m-1][n-1];
    }
};

