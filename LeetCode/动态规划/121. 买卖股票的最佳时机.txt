code:原始dp
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size() == 1) {
            return 0;
        }
        int result = 0;
        // dp[i]表示前i天股票的最低价格
        vector<int> dp(prices.size(), 0);
        dp[0] = prices[0];
        for (int i = 1; i < prices.size(); i++) {
            // 状态转移方程
            dp[i] = min(dp[i-1], prices[i]);
            result = max(result, prices[i] - dp[i]);
        }
        return result;
    }
};

code：空间优化后的dp
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.size() == 1) {
            return 0;
        }
        int result = 0;
        int minPrice = prices[0];
        for (int i = 1; i < prices.size(); i++) {
            minPrice = min(minPrice, prices[i]);
            result = max(result, prices[i] - minPrice);
        }
        return result;
    }
};
