note:
1.二分查找
2.STL lower_bound upper_bound
code:
class Solution {
public:
    int BinarySearch(const vector<int>& nums, int target)
    {
        int left = 0;
        int right = nums.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            }
        }
        return -1;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        if (nums.empty()) {
            return {-1, -1};
        }
        int targetIndex = BinarySearch(nums, target);
        if (targetIndex == -1) {
            return {-1, -1};
        }
        int leftIndex = targetIndex;
        int rightIndex = targetIndex;
        while (leftIndex >= 1) {
            if (nums[leftIndex - 1] == target) {
                leftIndex = leftIndex - 1;
            } else {
                break;
            }
        }
        while (rightIndex < nums.size() - 1) {
            if (nums[rightIndex + 1] == target) {
                rightIndex = rightIndex + 1;
            } else {
                break;
            }
        }
        return {leftIndex, rightIndex};
    }
};


code:
class Solution {
public:
	vector<int> searchRange(vector<int>& nums, int target) {
		int left = lower_bound(nums.begin(), nums.end(), target) - nums.begin();
		int right = upper_bound(nums.begin(), nums.end(), target) - nums.begin();
		if (left == right) {
            return vector<int>{-1, -1};
        } else {
            return{ left, right - 1 };
        } 
	}
};