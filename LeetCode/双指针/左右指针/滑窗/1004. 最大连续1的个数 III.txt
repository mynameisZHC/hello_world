note:
1.滑窗 双指针

code:
class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        string memory;
        for (auto item : nums) {
            memory +=to_string(item);
        }
        int left = 0;
        int right = 0;
        int arr[2] ={0};
        int result = 0;
        while (left < memory.size()) {
            // 一直移动右指针 直到滑窗里面'0'大于k 或者到达数组边界
            while (arr[0] <= k && right < memory.size()) {
                arr[memory[right] - '0']++;
                right++;
            }
            // 到此处可能是两组情况
            // 第一种是arr[0] > k 此时符合条件的滑窗长度为right -left -1
            // 第二种是arr[0] <= k  right == memory.size() 此时符合条件的滑窗长度为right -left;
            if (arr[0] > k) {
                result = max(result, right -left -1);
            } else {
                result = max(result, right -left);
                // 此时因为right已经到达边界 那么此时这个result就应该是最大的result了 不需要后面再滑动左指针
                break;
            }

            arr[memory[left] - '0']--;
            left++;

        }
        return result;
    }
};

code:
class Solution {
public:

    int longestOnes(vector<int>& nums, int k) {
        string memory;
        for (auto item : nums) {
            memory +=to_string(item);
        }
        int left = 0;
        int right = 0;
        int arr[2] ={0};
        int result = 0;
        while (right < memory.size()) {
            arr[memory[right] - '0']++;
            while (arr[0] > k) {
                arr[memory[left] - '0']--;
                left++;
            }
            result = max(result, right - left + 1);
            right++;
        }
        return result;
    }
};

模板
def findSubArray(nums):
    N = len(nums) # 数组/字符串长度
    left, right = 0, 0 # 双指针，表示当前遍历的区间[left, right]，闭区间
    sums = 0 # 用于统计 子数组/子区间 是否有效，根据题目可能会改成求和/计数
    res = 0 # 保存最大的满足题目要求的 子数组/子串 长度
    while right < N: # 当右边的指针没有搜索到 数组/字符串 的结尾
        sums += nums[right] # 增加当前右边指针的数字/字符的求和/计数
        while 区间[left, right]不符合题意：# 此时需要一直移动左指针，直至找到一个符合题意的区间
            sums -= nums[left] # 移动左指针前需要从counter中减少left位置字符的求和/计数
            left += 1 # 真正的移动左指针，注意不能跟上面一行代码写反
        # 到 while 结束时，我们找到了一个符合题意要求的 子数组/子串
        res = max(res, right - left + 1) # 需要更新结果
        right += 1 # 移动右指针，去探索新的区间
    return res

作者：fuxuemingzhu
链接：https://leetcode-cn.com/problems/max-consecutive-ones-iii/solution/fen-xiang-hua-dong-chuang-kou-mo-ban-mia-f76z/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
