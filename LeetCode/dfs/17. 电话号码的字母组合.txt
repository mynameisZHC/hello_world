note:
1.backtrack
2.char的运算
3.const map 不能使用下标[] 要使用at函数

mine:
class Solution {
public:
	map<char, vector<char>> g_mapInfo;
	vector<string> result;
	void dfs(string digits, int inputIndex, string tempStr)
	{
		if (inputIndex == digits.size()) {
			result.push_back(tempStr);
			return;
		}
		vector<char> mapChar = g_mapInfo[digits[inputIndex]];
		for (int index = 0; index < mapChar.size(); ++index) {
			tempStr += mapChar[index];
			dfs(digits, inputIndex + 1, tempStr);
			tempStr = tempStr.substr(0, tempStr.size() - 1);
		}
	}
	void InitialMapInfo()
	{
		char inputChar = '2';
		char ch = 'a';
		char lastChar = '7';
		vector<char> temp;
		while ((lastChar - inputChar) > 0) {
			for (int loop = 0; loop < 3; ++loop) {
				temp.push_back(ch++);
			}
			g_mapInfo[inputChar++] = temp;
			temp.clear();
		}
		g_mapInfo['7'] = { 'p', 'q', 'r', 's' };
		g_mapInfo['8'] = { 't', 'u', 'v' };
		g_mapInfo['9'] = { 'w', 'x', 'y', 'z' };

	}
	vector<string> letterCombinations(string digits)
	{
		if (digits.empty()) {
			return result;
		}

		InitialMapInfo();

		string str;
		dfs(digits, 0, str);
		return result;
	}
};

code:
class Solution {
public:
	vector<string> result;
	void BackTrack(const map<char, string>& mapInfo, const string &digits, int inputIndex, string str)
	{
		if (inputIndex == digits.size()) {
			result.push_back(str);
			return;
		}
		// const map 不能使用下标[] 要使用at函数
		const string &charStr = mapInfo.at(digits[inputIndex]);
		for (auto ch : charStr) {
			str.push_back(ch);
			BackTrack(mapInfo, digits, inputIndex + 1, str);
			str.pop_back();
		}
	}
	vector<string> letterCombinations(string digits)
	{
		if (digits.empty()) {
			return result;
		}

		map<char, string> phoneMap{
			{ '2', "abc" },
			{ '3', "def" },
			{ '4', "ghi" },
			{ '5', "jkl" },
			{ '6', "mno" },
			{ '7', "pqrs" },
			{ '8', "tuv" },
			{ '9', "wxyz" }
		};
		string str;
		BackTrack(phoneMap, digits, 0, str);
		return result;
	}
};