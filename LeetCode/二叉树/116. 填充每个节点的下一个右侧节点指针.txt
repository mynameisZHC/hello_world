note:
1.类似BFS 一层一层的遍历

code:
class Solution {
public:
    Node* connect(Node* root) {
        if (root == nullptr) {
            return nullptr;
        }

        queue<Node*> que;
        que.push(root);
        while (!que.empty()) {
            int size = que.size();
            for (int loop = 0; loop < size; ++loop) {
                Node* node = que.front();
                que.pop();
                // 最后一个点不用对next赋值 默认就是nullptr
                if (loop < size - 1) {
                    node->next = que.front();
                }

                if (node->left != nullptr) {
                    que.push(node->left);
                }

                if (node->right != nullptr) {
                    que.push(node->right);
                }
            }
        }
        return root;
    }
};

note:
1.递归

code:
class Solution {
public:
    void CoonectTowNode(Node *node1, Node *node2)
    {
        if (node1 == nullptr || node2 == nullptr) {
            return;
        }
        /**** 前序遍历位置 ****/
        // 将传入的两个节点连接
        node1->next = node2;
        
        // 连接相同父节点的两个子节点
        CoonectTowNode(node1->left, node1->right);
        CoonectTowNode(node2->left, node2->right);
        // 连接跨越父节点的两个子节点
        CoonectTowNode(node1->right, node2->left);
        return;
    }
    Node* connect(Node* root) {
        if (root == nullptr) {
            return nullptr;
        }
        CoonectTowNode(root->left, root->right);
        return  root;
    }
};
